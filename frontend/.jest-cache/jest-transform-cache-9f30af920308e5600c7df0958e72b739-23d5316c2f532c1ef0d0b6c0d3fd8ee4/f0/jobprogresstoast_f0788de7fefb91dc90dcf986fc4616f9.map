{"version":3,"names":["cov_1wusvwecbs","actualCoverage","s","JobProgressToast","f","JobProgressToastProvider","jobId","autoStart","b","pollInterval","onComplete","onError","showHistory","activeJobs","setActiveJobs","_react","useState","Map","completedJobs","setCompletedJobs","isPolling","setIsPolling","getJobIcon","type","_jsxruntime","jsx","_lucidereact","FileText","className","Shield","Download","Zap","Package","Database","Loader2","getStatusIcon","status","Clock","Pause","CheckCircle","XCircle","X","RefreshCw","fetchJobStatus","useCallback","id","response","_client","apiClient","get","error","console","fetchAllActiveJobs","jobs","updateJob","job","prev","newMap","includes","delete","prevCompleted","showJobToast","set","progress","showProgressToast","useEffect","interval","setInterval","forEach","clearInterval","icon","message","getDefaultMessage","_sonner","toast","success","jsxs","name","duration","action","retryCount","undefined","maxRetries","label","onClick","retryJob","toastId","custom","t","_badge","Badge","variant","_progress","Progress","value","metadata","stepName","_button","Button","size","pauseJob","cancelJob","Infinity","setTimeout","dismiss","post","info","resumeJob","getElapsedTime","start","Date","startedAt","getTime","end","completedAt","now","elapsed","Math","floor","_card","Card","CardHeader","CardTitle","CardDescription","length","CardContent","_scrollarea","ScrollArea","Array","from","values","map","Play","children","Fragment","Toaster","position"],"sources":["/Users/noritakasawada/AI_P/subsidyApp/frontend/src/components/jobs/job-progress-toast.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { toast, Toaster } from 'sonner';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport {\n  Loader2,\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n  RefreshCw,\n  X,\n  Pause,\n  Play,\n  Clock,\n  Zap,\n  FileText,\n  Database,\n  Package,\n  Shield,\n  Download,\n} from 'lucide-react';\nimport { apiClient } from '@/lib/api/client';\n\n/**\n * ジョブ進捗トーストコンポーネント\n * APP-438: /jobs監視・再試行/キャンセル\n */\n\nexport interface Job {\n  id: string;\n  name: string;\n  type: JobType;\n  status: JobStatus;\n  progress?: number;\n  message?: string;\n  startedAt: string;\n  completedAt?: string;\n  error?: string;\n  retryCount?: number;\n  maxRetries?: number;\n  result?: any;\n  metadata?: JobMetadata;\n}\n\ntype JobType =\n  | 'generate'\n  | 'validate'\n  | 'export'\n  | 'ocr'\n  | 'preflight'\n  | 'upload'\n  | 'process';\n\ntype JobStatus =\n  | 'pending'\n  | 'running'\n  | 'paused'\n  | 'completed'\n  | 'failed'\n  | 'cancelled'\n  | 'retrying';\n\ninterface JobMetadata {\n  totalSteps?: number;\n  currentStep?: number;\n  stepName?: string;\n  estimatedTime?: number;\n  cost?: number;\n  fileSize?: number;\n}\n\ninterface JobProgressToastProps {\n  jobId?: string;\n  autoStart?: boolean;\n  pollInterval?: number;\n  onComplete?: (job: Job) => void;\n  onError?: (job: Job) => void;\n  showHistory?: boolean;\n}\n\nexport function JobProgressToast({\n  jobId,\n  autoStart = true,\n  pollInterval = 1000,\n  onComplete,\n  onError,\n  showHistory = false,\n}: JobProgressToastProps) {\n  const [activeJobs, setActiveJobs] = useState<Map<string, Job>>(new Map());\n  const [completedJobs, setCompletedJobs] = useState<Job[]>([]);\n  const [isPolling, setIsPolling] = useState(autoStart);\n\n  /**\n   * ジョブタイプアイコン\n   */\n  const getJobIcon = (type: JobType) => {\n    switch (type) {\n      case 'generate':\n        return <FileText className=\"h-4 w-4\" />;\n      case 'validate':\n        return <Shield className=\"h-4 w-4\" />;\n      case 'export':\n        return <Download className=\"h-4 w-4\" />;\n      case 'ocr':\n        return <Zap className=\"h-4 w-4\" />;\n      case 'preflight':\n        return <Package className=\"h-4 w-4\" />;\n      case 'upload':\n        return <Database className=\"h-4 w-4\" />;\n      default:\n        return <Loader2 className=\"h-4 w-4\" />;\n    }\n  };\n\n  /**\n   * ステータスアイコン\n   */\n  const getStatusIcon = (status: JobStatus) => {\n    switch (status) {\n      case 'pending':\n        return <Clock className=\"h-4 w-4 text-muted-foreground\" />;\n      case 'running':\n        return <Loader2 className=\"h-4 w-4 animate-spin text-primary\" />;\n      case 'paused':\n        return <Pause className=\"h-4 w-4 text-yellow-600\" />;\n      case 'completed':\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case 'failed':\n        return <XCircle className=\"h-4 w-4 text-destructive\" />;\n      case 'cancelled':\n        return <X className=\"h-4 w-4 text-muted-foreground\" />;\n      case 'retrying':\n        return <RefreshCw className=\"h-4 w-4 animate-spin text-yellow-600\" />;\n    }\n  };\n\n  /**\n   * ジョブステータス取得\n   */\n  const fetchJobStatus = useCallback(async (id: string) => {\n    try {\n      const response = await apiClient.get(`/jobs/${id}`);\n      return response as Job;\n    } catch (error) {\n      console.error(`Failed to fetch job ${id}:`, error);\n      return null;\n    }\n  }, []);\n\n  /**\n   * 全アクティブジョブ取得\n   */\n  const fetchAllActiveJobs = useCallback(async () => {\n    try {\n      const response = await apiClient.get('/jobs/active');\n      return response.jobs as Job[];\n    } catch (error) {\n      console.error('Failed to fetch active jobs:', error);\n      return [];\n    }\n  }, []);\n\n  /**\n   * ジョブ更新処理\n   */\n  const updateJob = useCallback((job: Job) => {\n    setActiveJobs((prev) => {\n      const newMap = new Map(prev);\n\n      // 完了・失敗・キャンセルの場合は削除\n      if (['completed', 'failed', 'cancelled'].includes(job.status)) {\n        newMap.delete(job.id);\n        setCompletedJobs((prevCompleted) => [...prevCompleted, job]);\n\n        // コールバック実行\n        if (job.status === 'completed') {\n          onComplete?.(job);\n          showJobToast(job, 'success');\n        } else if (job.status === 'failed') {\n          onError?.(job);\n          showJobToast(job, 'error');\n        }\n      } else {\n        // アクティブジョブを更新\n        newMap.set(job.id, job);\n\n        // 進捗トースト表示\n        if (job.status === 'running' && job.progress) {\n          showProgressToast(job);\n        }\n      }\n\n      return newMap;\n    });\n  }, [onComplete, onError]);\n\n  /**\n   * ポーリング処理\n   */\n  useEffect(() => {\n    if (!isPolling) return;\n\n    const interval = setInterval(async () => {\n      if (jobId) {\n        // 特定ジョブの監視\n        const job = await fetchJobStatus(jobId);\n        if (job) {\n          updateJob(job);\n        }\n      } else {\n        // 全アクティブジョブの監視\n        const jobs = await fetchAllActiveJobs();\n        jobs.forEach(updateJob);\n      }\n    }, pollInterval);\n\n    return () => clearInterval(interval);\n  }, [isPolling, jobId, pollInterval, fetchJobStatus, fetchAllActiveJobs, updateJob]);\n\n  /**\n   * ジョブトースト表示\n   */\n  const showJobToast = (job: Job, type: 'success' | 'error' | 'info') => {\n    const icon = getJobIcon(job.type);\n    const message = job.message || getDefaultMessage(job);\n\n    if (type === 'success') {\n      toast.success(\n        <div className=\"flex items-center gap-2\">\n          {icon}\n          <div>\n            <div className=\"font-medium\">{job.name}</div>\n            <div className=\"text-sm text-muted-foreground\">{message}</div>\n          </div>\n        </div>,\n        {\n          duration: 5000,\n        }\n      );\n    } else if (type === 'error') {\n      toast.error(\n        <div className=\"flex items-center gap-2\">\n          {icon}\n          <div>\n            <div className=\"font-medium\">{job.name} 失敗</div>\n            <div className=\"text-sm\">{job.error || '処理中にエラーが発生しました'}</div>\n          </div>\n        </div>,\n        {\n          duration: 10000,\n          action: job.retryCount !== undefined && job.retryCount < (job.maxRetries || 3) ? {\n            label: '再試行',\n            onClick: () => retryJob(job.id),\n          } : undefined,\n        }\n      );\n    }\n  };\n\n  /**\n   * 進捗トースト表示\n   */\n  const showProgressToast = (job: Job) => {\n    const toastId = `job-progress-${job.id}`;\n    const icon = getJobIcon(job.type);\n    const progress = job.progress || 0;\n\n    toast.custom(\n      (t) => (\n        <div className=\"flex items-center gap-3 bg-background border rounded-lg p-3 shadow-lg\">\n          {icon}\n          <div className=\"flex-1 space-y-1\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium\">{job.name}</span>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {progress}%\n              </Badge>\n            </div>\n            <Progress value={progress} className=\"h-2\" />\n            {job.metadata?.stepName && (\n              <p className=\"text-xs text-muted-foreground\">\n                {job.metadata.stepName}\n              </p>\n            )}\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"h-8 w-8\"\n              onClick={() => pauseJob(job.id)}\n            >\n              <Pause className=\"h-3 w-3\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"h-8 w-8\"\n              onClick={() => cancelJob(job.id)}\n            >\n              <X className=\"h-3 w-3\" />\n            </Button>\n          </div>\n        </div>\n      ),\n      {\n        id: toastId,\n        duration: Infinity,\n      }\n    );\n\n    // 完了時にトーストを削除\n    if (progress >= 100) {\n      setTimeout(() => toast.dismiss(toastId), 1000);\n    }\n  };\n\n  /**\n   * デフォルトメッセージ取得\n   */\n  const getDefaultMessage = (job: Job): string => {\n    switch (job.status) {\n      case 'completed':\n        return '処理が正常に完了しました';\n      case 'failed':\n        return '処理に失敗しました';\n      case 'cancelled':\n        return '処理がキャンセルされました';\n      case 'running':\n        return `処理中... ${job.progress || 0}%`;\n      case 'retrying':\n        return `再試行中 (${job.retryCount}/${job.maxRetries})`;\n      default:\n        return '処理を開始しています';\n    }\n  };\n\n  /**\n   * ジョブ再試行\n   */\n  const retryJob = async (id: string) => {\n    try {\n      await apiClient.post(`/jobs/${id}/retry`);\n      toast.info('ジョブを再試行しています');\n    } catch (error) {\n      toast.error('再試行に失敗しました');\n    }\n  };\n\n  /**\n   * ジョブキャンセル\n   */\n  const cancelJob = async (id: string) => {\n    try {\n      await apiClient.post(`/jobs/${id}/cancel`);\n      toast.info('ジョブをキャンセルしました');\n    } catch (error) {\n      toast.error('キャンセルに失敗しました');\n    }\n  };\n\n  /**\n   * ジョブ一時停止\n   */\n  const pauseJob = async (id: string) => {\n    try {\n      await apiClient.post(`/jobs/${id}/pause`);\n      toast.info('ジョブを一時停止しました');\n    } catch (error) {\n      toast.error('一時停止に失敗しました');\n    }\n  };\n\n  /**\n   * ジョブ再開\n   */\n  const resumeJob = async (id: string) => {\n    try {\n      await apiClient.post(`/jobs/${id}/resume`);\n      toast.info('ジョブを再開しました');\n    } catch (error) {\n      toast.error('再開に失敗しました');\n    }\n  };\n\n  /**\n   * 実行時間計算\n   */\n  const getElapsedTime = (job: Job): string => {\n    const start = new Date(job.startedAt).getTime();\n    const end = job.completedAt ? new Date(job.completedAt).getTime() : Date.now();\n    const elapsed = Math.floor((end - start) / 1000);\n\n    if (elapsed < 60) return `${elapsed}秒`;\n    if (elapsed < 3600) return `${Math.floor(elapsed / 60)}分`;\n    return `${Math.floor(elapsed / 3600)}時間`;\n  };\n\n  // 履歴表示UI\n  if (showHistory) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>ジョブ履歴</CardTitle>\n          <CardDescription>\n            アクティブ: {activeJobs.size} / 完了: {completedJobs.length}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ScrollArea className=\"h-96\">\n            <div className=\"space-y-2\">\n              {/* アクティブジョブ */}\n              {Array.from(activeJobs.values()).map((job) => (\n                <div\n                  key={job.id}\n                  className=\"flex items-center justify-between p-3 border rounded-lg bg-muted/50\"\n                >\n                  <div className=\"flex items-center gap-3\">\n                    {getStatusIcon(job.status)}\n                    <div>\n                      <div className=\"font-medium text-sm\">{job.name}</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {job.metadata?.stepName || getDefaultMessage(job)}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {job.progress !== undefined && (\n                      <div className=\"w-24\">\n                        <Progress value={job.progress} className=\"h-2\" />\n                      </div>\n                    )}\n                    {job.status === 'paused' ? (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => resumeJob(job.id)}\n                      >\n                        <Play className=\"h-3 w-3\" />\n                      </Button>\n                    ) : (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => pauseJob(job.id)}\n                      >\n                        <Pause className=\"h-3 w-3\" />\n                      </Button>\n                    )}\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => cancelJob(job.id)}\n                    >\n                      <X className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n\n              {/* 完了ジョブ */}\n              {completedJobs.map((job) => (\n                <div\n                  key={job.id}\n                  className=\"flex items-center justify-between p-3 border rounded-lg opacity-60\"\n                >\n                  <div className=\"flex items-center gap-3\">\n                    {getStatusIcon(job.status)}\n                    <div>\n                      <div className=\"font-medium text-sm\">{job.name}</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {getElapsedTime(job)}\n                      </div>\n                    </div>\n                  </div>\n                  {job.status === 'failed' && job.retryCount !== undefined && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => retryJob(job.id)}\n                    >\n                      <RefreshCw className=\"h-3 w-3\" />\n                    </Button>\n                  )}\n                </div>\n              ))}\n            </div>\n          </ScrollArea>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // トースト通知のみ（UIなし）\n  return null;\n}\n\n/**\n * ジョブ進捗トーストプロバイダー\n */\nexport function JobProgressToastProvider({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      {children}\n      <Toaster position=\"bottom-right\" />\n      <JobProgressToast />\n    </>\n  );\n}"],"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","ignoreList":[]}