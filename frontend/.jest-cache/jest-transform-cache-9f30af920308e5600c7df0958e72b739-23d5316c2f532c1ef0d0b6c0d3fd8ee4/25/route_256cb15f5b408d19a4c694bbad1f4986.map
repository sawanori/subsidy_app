{"version":3,"names":["cov_28ggoe0598","actualCoverage","s","POST","request","f","userId","email","accountName","json","b","_server","NextResponse","error","status","supabase","_server1","createClient","data","from","insert","id","account_name","created_at","Date","toISOString","updated_at","select","single","console","user"],"sources":["/Users/noritakasawada/AI_P/subsidyApp/frontend/src/app/api/auth/register/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { userId, email, accountName } = await request.json()\n\n    if (!userId || !email || !accountName) {\n      return NextResponse.json(\n        { error: 'Missing required fields' },\n        { status: 400 }\n      )\n    }\n\n    const supabase = await createClient()\n\n    // Create user record in the users table\n    const { data, error } = await supabase\n      .from('users')\n      .insert({\n        id: userId,\n        email: email,\n        account_name: accountName,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      })\n      .select()\n      .single()\n\n    if (error) {\n      console.error('Failed to create user record:', error)\n      return NextResponse.json(\n        { error: 'Failed to create user record' },\n        { status: 500 }\n      )\n    }\n\n    return NextResponse.json({ user: data }, { status: 201 })\n  } catch (error) {\n    console.error('Registration error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}"],"mappings":"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","ignoreList":[]}