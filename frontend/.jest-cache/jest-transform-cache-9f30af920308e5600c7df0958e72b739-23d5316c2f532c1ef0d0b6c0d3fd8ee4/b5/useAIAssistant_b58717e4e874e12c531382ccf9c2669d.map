{"version":3,"names":["cov_1su9e8qkwy","actualCoverage","s","useAIAssistant","options","f","isLoading","setIsLoading","_react","useState","response","setResponse","error","setError","callAI","useCallback","feature","data","apiUrl","b","process","env","NEXT_PUBLIC_API_URL","endpoint","res","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","aiResponse","json","onSuccess","_sonner","toast","success","err","onError","message","analyzeIssues","businessDescription","painPoints","businessType","suggestSolutions","currentIssues","maxAmount","implementationPeriod","elaboratePlan","planSummary","targetIssue","suggestKPIs","businessPlan","expectedEffects","analyzeRisks","implementationDetails","analyzeMarket","targetCustomer","region","generateGantt","mainActivities","generateSummary","companyInfo","solutions","requestedAmount"],"sources":["/Users/noritakasawada/AI_P/subsidyApp/frontend/src/hooks/useAIAssistant.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { toast } from 'sonner';\n\nexport type AIFeature = \n  | 'analyze-issues'\n  | 'suggest-solutions'\n  | 'elaborate-plan'\n  | 'suggest-kpis'\n  | 'analyze-risks'\n  | 'analyze-market'\n  | 'generate-gantt'\n  | 'generate-summary';\n\ninterface AIResponse {\n  content: any;\n  type: 'text' | 'json' | 'markdown';\n  category: string;\n  tokensUsed: number;\n  confidence?: number;\n  metadata?: Record<string, any>;\n}\n\ninterface UseAIAssistantOptions {\n  onSuccess?: (response: AIResponse) => void;\n  onError?: (error: Error) => void;\n}\n\nexport function useAIAssistant(options?: UseAIAssistantOptions) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [response, setResponse] = useState<AIResponse | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n\n  const callAI = useCallback(async (\n    feature: AIFeature,\n    data: any\n  ): Promise<AIResponse | null> => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';\n      const endpoint = `${apiUrl}/api/ai-assistant/${feature}`;\n      \n      const res = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!res.ok) {\n        throw new Error(`AI request failed: ${res.statusText}`);\n      }\n\n      const aiResponse: AIResponse = await res.json();\n      setResponse(aiResponse);\n      \n      if (options?.onSuccess) {\n        options.onSuccess(aiResponse);\n      }\n      \n      toast.success('AI分析が完了しました');\n      return aiResponse;\n    } catch (err) {\n      const error = err as Error;\n      setError(error);\n      \n      if (options?.onError) {\n        options.onError(error);\n      }\n      \n      toast.error('AI分析に失敗しました: ' + error.message);\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [options]);\n\n  // 課題分析\n  const analyzeIssues = useCallback(async (\n    businessDescription: string,\n    painPoints: string,\n    businessType?: string\n  ) => {\n    return callAI('analyze-issues', {\n      businessDescription,\n      painPoints,\n      businessType,\n    });\n  }, [callAI]);\n\n  // 解決策提案\n  const suggestSolutions = useCallback(async (\n    currentIssues: any[],\n    businessType: string,\n    maxAmount: number,\n    implementationPeriod: string\n  ) => {\n    return callAI('suggest-solutions', {\n      currentIssues,\n      businessType,\n      maxAmount,\n      implementationPeriod,\n    });\n  }, [callAI]);\n\n  // 5W1H詳細化\n  const elaboratePlan = useCallback(async (\n    planSummary: string,\n    targetIssue: string\n  ) => {\n    return callAI('elaborate-plan', {\n      planSummary,\n      targetIssue,\n    });\n  }, [callAI]);\n\n  // KPI提案\n  const suggestKPIs = useCallback(async (\n    businessPlan: string,\n    expectedEffects: string\n  ) => {\n    return callAI('suggest-kpis', {\n      businessPlan,\n      expectedEffects,\n    });\n  }, [callAI]);\n\n  // リスク分析\n  const analyzeRisks = useCallback(async (\n    businessPlan: string,\n    implementationDetails: string\n  ) => {\n    return callAI('analyze-risks', {\n      businessPlan,\n      implementationDetails,\n    });\n  }, [callAI]);\n\n  // 市場分析\n  const analyzeMarket = useCallback(async (\n    businessDescription: string,\n    targetCustomer: string,\n    region?: string\n  ) => {\n    return callAI('analyze-market', {\n      businessDescription,\n      targetCustomer,\n      region,\n    });\n  }, [callAI]);\n\n  // ガントチャート生成\n  const generateGantt = useCallback(async (\n    businessPlan: string,\n    implementationPeriod: string,\n    mainActivities: string[]\n  ) => {\n    return callAI('generate-gantt', {\n      businessPlan,\n      implementationPeriod,\n      mainActivities,\n    });\n  }, [callAI]);\n\n  // 申請書サマリー生成\n  const generateSummary = useCallback(async (\n    companyInfo: any,\n    currentIssues: any[],\n    solutions: string,\n    expectedEffects: string,\n    requestedAmount: number\n  ) => {\n    return callAI('generate-summary', {\n      companyInfo,\n      currentIssues,\n      solutions,\n      expectedEffects,\n      requestedAmount,\n    });\n  }, [callAI]);\n\n  return {\n    isLoading,\n    response,\n    error,\n    analyzeIssues,\n    suggestSolutions,\n    elaboratePlan,\n    suggestKPIs,\n    analyzeRisks,\n    analyzeMarket,\n    generateGantt,\n    generateSummary,\n  };\n}"],"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","ignoreList":[]}