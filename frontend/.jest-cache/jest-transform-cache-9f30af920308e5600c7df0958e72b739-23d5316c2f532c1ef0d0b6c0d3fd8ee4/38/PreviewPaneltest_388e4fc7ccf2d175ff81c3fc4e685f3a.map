{"version":3,"sources":["/Users/noritakasawada/AI_P/subsidyApp/frontend/src/components/preview/__tests__/PreviewPanel.test.tsx"],"sourcesContent":["/**\n * APP-100: PreviewPanel 単体テスト\n * React Testing Library + Jest, 70%+ カバレッジ目標\n */\n\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { PreviewPanel } from '../PreviewPanel';\nimport { PreviewProvider } from '@/contexts/PreviewContext';\nimport { PreviewData, PreviewConfig } from '@/types/preview';\n\n// モック設定\njest.mock('next-intl', () => ({\n  useTranslations: () => (key: string) => key\n}));\n\n// テストデータ\nconst mockData: PreviewData = {\n  form1: {\n    applicantName: 'テスト株式会社',\n    applicantAddress: '東京都渋谷区テスト1-2-3',\n    representativeName: '代表太郎',\n    contactPhone: '03-1234-5678',\n    contactEmail: 'test@example.com',\n    businessName: 'AI開発プロジェクト',\n    businessPurpose: 'AI技術開発',\n    projectPeriod: '2024年度'\n  },\n  form2: {\n    budgetTotal: '5000000',\n    subsidyAmount: '2500000',\n    selfFunding: '2500000'\n  },\n  form4: {\n    technicalDetails: 'AI機械学習技術',\n    expectedResults: '効率50%向上'\n  },\n  confirmation: {\n    termsAgreed: false,\n    informationAccuracy: false,\n    submissionDate: ''\n  }\n};\n\nconst mockConfig: PreviewConfig = {\n  activeForm: 'form1',\n  zoom: 1,\n  showGrid: false,\n  fullscreen: false,\n  autoUpdate: true\n};\n\nconst mockOnConfigChange = jest.fn();\nconst mockOnExport = jest.fn();\n\n// テストヘルパー\nconst renderWithProvider = (props: any = {}) => {\n  return render(\n    <PreviewProvider>\n      <PreviewPanel\n        data={mockData}\n        config={mockConfig}\n        onConfigChange={mockOnConfigChange}\n        onExport={mockOnExport}\n        {...props}\n      />\n    </PreviewProvider>\n  );\n};\n\ndescribe('PreviewPanel', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Rendering', () => {\n    test('renders preview panel with correct title', () => {\n      renderWithProvider();\n      \n      expect(screen.getByText('リアルタイムプレビュー')).toBeInTheDocument();\n    });\n\n    test('renders all form tabs', () => {\n      renderWithProvider();\n      \n      expect(screen.getByText(/様式1/)).toBeInTheDocument();\n      expect(screen.getByText(/様式2/)).toBeInTheDocument();\n      expect(screen.getByText(/様式4/)).toBeInTheDocument();\n      expect(screen.getByText(/確認/)).toBeInTheDocument();\n    });\n\n    test('displays preview content based on active form', () => {\n      renderWithProvider();\n      \n      // Form 1がアクティブな状態での表示確認\n      expect(screen.getByDisplayValue('テスト株式会社')).toBeInTheDocument();\n      expect(screen.getByDisplayValue('AI開発プロジェクト')).toBeInTheDocument();\n    });\n  });\n\n  describe('Form Navigation', () => {\n    test('switches between forms correctly', async () => {\n      const user = userEvent.setup();\n      renderWithProvider();\n      \n      // Form 2に切り替え\n      await user.click(screen.getByText(/様式2/));\n      \n      expect(mockOnConfigChange).toHaveBeenCalledWith({\n        ...mockConfig,\n        activeForm: 'form2'\n      });\n    });\n\n    test('displays correct content for each form', () => {\n      // Form 2がアクティブな状態でテスト\n      const form2Config = { ...mockConfig, activeForm: 'form2' as const };\n      renderWithProvider({ config: form2Config });\n      \n      expect(screen.getByDisplayValue('5000000')).toBeInTheDocument();\n      expect(screen.getByDisplayValue('2500000')).toBeInTheDocument();\n    });\n  });\n\n  describe('Preview Controls', () => {\n    test('zoom control works correctly', async () => {\n      const user = userEvent.setup();\n      renderWithProvider();\n      \n      const zoomSelect = screen.getByDisplayValue('100%');\n      await user.selectOptions(zoomSelect, '1.25');\n      \n      expect(mockOnConfigChange).toHaveBeenCalledWith({\n        ...mockConfig,\n        zoom: 1.25\n      });\n    });\n\n    test('fullscreen toggle works', async () => {\n      const user = userEvent.setup();\n      renderWithProvider();\n      \n      const fullscreenButton = screen.getByRole('button', { name: /拡大/ });\n      await user.click(fullscreenButton);\n      \n      expect(mockOnConfigChange).toHaveBeenCalledWith({\n        ...mockConfig,\n        fullscreen: true\n      });\n    });\n\n    test('grid toggle works', async () => {\n      const user = userEvent.setup();\n      renderWithProvider();\n      \n      const gridButton = screen.getByRole('button', { name: /設定/ });\n      await user.click(gridButton);\n      \n      expect(mockOnConfigChange).toHaveBeenCalledWith({\n        ...mockConfig,\n        showGrid: !mockConfig.showGrid\n      });\n    });\n  });\n\n  describe('Export Functionality', () => {\n    test('PDF export button triggers export handler', async () => {\n      const user = userEvent.setup();\n      renderWithProvider();\n      \n      const exportButton = screen.getByRole('button', { name: /PDF/ });\n      await user.click(exportButton);\n      \n      expect(mockOnExport).toHaveBeenCalledWith('pdf');\n    });\n\n    test('export button is disabled when no export handler provided', () => {\n      renderWithProvider({ onExport: undefined });\n      \n      const exportButton = screen.getByRole('button', { name: /PDF/ });\n      expect(exportButton).toBeDisabled();\n    });\n  });\n\n  describe('Real-time Updates', () => {\n    test('updates preview when data changes', async () => {\n      const { rerender } = renderWithProvider();\n      \n      const newData = {\n        ...mockData,\n        form1: {\n          ...mockData.form1,\n          applicantName: '更新された会社名'\n        }\n      };\n      \n      rerender(\n        <PreviewProvider>\n          <PreviewPanel\n            data={newData}\n            config={mockConfig}\n            onConfigChange={mockOnConfigChange}\n            onExport={mockOnExport}\n          />\n        </PreviewProvider>\n      );\n      \n      expect(screen.getByDisplayValue('更新された会社名')).toBeInTheDocument();\n    });\n  });\n\n  describe('Progress Calculation', () => {\n    test('calculates completion percentage correctly', () => {\n      // すべてのフィールドが埋まった状態\n      const completeData = {\n        form1: {\n          applicantName: 'テスト会社',\n          applicantAddress: 'テスト住所',\n          representativeName: '代表者',\n          contactPhone: '090-1234-5678',\n          contactEmail: 'test@test.com',\n          businessName: 'テスト事業',\n          businessPurpose: 'テスト目的',\n          projectPeriod: '1年'\n        },\n        form2: { budgetTotal: '1000000', subsidyAmount: '500000', selfFunding: '500000' },\n        form4: { technicalDetails: 'テスト', expectedResults: 'テスト' },\n        confirmation: { termsAgreed: true, informationAccuracy: true, submissionDate: '2024-09-09' }\n      };\n      \n      renderWithProvider({ data: completeData });\n      \n      // 完成度が表示されていることを確認\n      expect(screen.getByText(/完成度/)).toBeInTheDocument();\n    });\n  });\n\n  describe('Accessibility', () => {\n    test('has proper ARIA labels', () => {\n      renderWithProvider();\n      \n      // フォーム切り替えタブにrole=\"tab\"があることを確認\n      const tabs = screen.getAllByRole('tab');\n      expect(tabs.length).toBeGreaterThan(0);\n    });\n\n    test('supports keyboard navigation', async () => {\n      const user = userEvent.setup();\n      renderWithProvider();\n      \n      // Tab キーでナビゲーション\n      await user.tab();\n      expect(document.activeElement).toBeDefined();\n    });\n\n    test('has focus indicators', () => {\n      renderWithProvider();\n      \n      const interactiveElements = screen.getAllByRole('button');\n      interactiveElements.forEach(element => {\n        expect(element).toHaveStyle('cursor: pointer');\n      });\n    });\n  });\n\n  describe('Performance', () => {\n    test('renders within acceptable time', () => {\n      const startTime = Date.now();\n      renderWithProvider();\n      const renderTime = Date.now() - startTime;\n      \n      // governance.yaml: 2秒以内レンダリング\n      expect(renderTime).toBeLessThan(2000);\n    });\n\n    test('handles large data sets efficiently', () => {\n      const largeData = {\n        ...mockData,\n        form1: {\n          ...mockData.form1,\n          businessPurpose: 'A'.repeat(10000) // 大きなテキスト\n        }\n      };\n      \n      const startTime = Date.now();\n      renderWithProvider({ data: largeData });\n      const renderTime = Date.now() - startTime;\n      \n      expect(renderTime).toBeLessThan(1000);\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('handles missing data gracefully', () => {\n      const incompleteData = { form1: {} };\n      \n      expect(() => {\n        renderWithProvider({ data: incompleteData });\n      }).not.toThrow();\n    });\n\n    test('handles invalid config gracefully', () => {\n      const invalidConfig = { ...mockConfig, zoom: -1 };\n      \n      expect(() => {\n        renderWithProvider({ config: invalidConfig });\n      }).not.toThrow();\n    });\n  });\n\n  describe('Responsive Design', () => {\n    test('adapts to mobile viewport', () => {\n      // モバイルサイズのビューポートをシミュレート\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375,\n      });\n\n      renderWithProvider();\n      \n      // レスポンシブレイアウトが機能していることを確認\n      const previewPanel = screen.getByRole('tabpanel');\n      expect(previewPanel).toBeInTheDocument();\n    });\n  });\n});"],"names":["jest","mock","useTranslations","key","mockData","form1","applicantName","applicantAddress","representativeName","contactPhone","contactEmail","businessName","businessPurpose","projectPeriod","form2","budgetTotal","subsidyAmount","selfFunding","form4","technicalDetails","expectedResults","confirmation","termsAgreed","informationAccuracy","submissionDate","mockConfig","activeForm","zoom","showGrid","fullscreen","autoUpdate","mockOnConfigChange","fn","mockOnExport","renderWithProvider","props","render","PreviewProvider","PreviewPanel","data","config","onConfigChange","onExport","describe","beforeEach","clearAllMocks","test","expect","screen","getByText","toBeInTheDocument","getByDisplayValue","user","userEvent","setup","click","toHaveBeenCalledWith","form2Config","zoomSelect","selectOptions","fullscreenButton","getByRole","name","gridButton","exportButton","undefined","toBeDisabled","rerender","newData","completeData","tabs","getAllByRole","length","toBeGreaterThan","tab","document","activeElement","toBeDefined","interactiveElements","forEach","element","toHaveStyle","startTime","Date","now","renderTime","toBeLessThan","largeData","repeat","incompleteData","not","toThrow","invalidConfig","Object","defineProperty","window","writable","configurable","value","previewPanel"],"mappings":"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"}