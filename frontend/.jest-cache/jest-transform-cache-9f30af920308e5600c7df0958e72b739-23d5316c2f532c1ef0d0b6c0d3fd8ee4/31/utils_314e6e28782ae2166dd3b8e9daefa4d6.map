{"version":3,"names":["cn","cov_1f74pprzkt","f","s","formatBytes","formatCurrency","formatDate","formatDateTime","removeEmpty","safeJsonParse","toKebabCase","unique","inputs","_tailwindmerge","twMerge","_clsx","clsx","amount","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","dateString","b","date","Date","DateTimeFormat","year","month","day","error","dateTimeString","hour","minute","bytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","str","replace","toLowerCase","array","Array","from","Set","jsonString","fallback","JSON","parse","obj","Object","fromEntries","entries","filter","_","value","undefined"],"sources":["/Users/noritakasawada/AI_P/subsidyApp/frontend/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n/**\n * 数値を日本の通貨形式でフォーマット\n */\nexport function formatCurrency(amount: number): string {\n  return new Intl.NumberFormat('ja-JP', {\n    style: 'decimal',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n}\n\n/**\n * ISO日付文字列を日本語形式でフォーマット\n */\nexport function formatDate(dateString: string): string {\n  if (!dateString) return '';\n  \n  try {\n    const date = new Date(dateString);\n    return new Intl.DateTimeFormat('ja-JP', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n    }).format(date);\n  } catch (error) {\n    return dateString;\n  }\n}\n\n/**\n * ISO日時文字列を日本語形式でフォーマット\n */\nexport function formatDateTime(dateTimeString: string): string {\n  if (!dateTimeString) return '';\n  \n  try {\n    const date = new Date(dateTimeString);\n    return new Intl.DateTimeFormat('ja-JP', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n    }).format(date);\n  } catch (error) {\n    return dateTimeString;\n  }\n}\n\n/**\n * バイト数を人間が読みやすい形式でフォーマット\n */\nexport function formatBytes(bytes: number, decimals = 2): string {\n  if (bytes === 0) return '0 Bytes';\n\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n/**\n * 文字列をケバブケースに変換\n */\nexport function toKebabCase(str: string): string {\n  return str\n    .replace(/([a-z])([A-Z])/g, '$1-$2')\n    .replace(/[\\s_]+/g, '-')\n    .toLowerCase();\n}\n\n/**\n * 配列から重複を削除\n */\nexport function unique<T>(array: T[]): T[] {\n  return Array.from(new Set(array));\n}\n\n/**\n * 安全なJSON.parse\n */\nexport function safeJsonParse<T>(jsonString: string, fallback: T): T {\n  try {\n    return JSON.parse(jsonString);\n  } catch {\n    return fallback;\n  }\n}\n\n/**\n * オブジェクトから空の値を除去\n */\nexport function removeEmpty<T extends Record<string, any>>(obj: T): Partial<T> {\n  return Object.fromEntries(\n    Object.entries(obj).filter(([_, value]) => \n      value !== null && value !== undefined && value !== ''\n    )\n  ) as Partial<T>;\n}\n"],"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","ignoreList":[]}