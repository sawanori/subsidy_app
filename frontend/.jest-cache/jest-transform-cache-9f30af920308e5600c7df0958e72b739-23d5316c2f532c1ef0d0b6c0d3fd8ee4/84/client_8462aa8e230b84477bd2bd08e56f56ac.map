{"version":3,"names":["ApiClient","cov_28rv8122se","f","s","ApiError","apiClient","default","_default","Error","constructor","message","status","code","details","name","config","b","baseURL","process","env","NEXT_PUBLIC_API_URL","defaultHeaders","headers","timeout","setAuthToken","token","authToken","clearAuthToken","undefined","generateIdempotencyKey","Date","now","Math","random","toString","substring","withTimeout","promise","timeoutMs","Promise","race","_","reject","setTimeout","sleep","ms","resolve","retryRequest","url","options","retryConfig","maxAttempts","attempts","baseDelay","delay","useBackoff","backoff","lastError","attempt","response","fetch","error","pow","request","endpoint","isFormData","FormData","body","method","toUpperCase","includes","idempotencyKey","requestOptions","fetchPromise","retry","ok","errorData","json","catch","statusText","timestamp","toISOString","path","data","errorMessage","get","post","JSON","stringify","put","patch","delete","uploadFile","file","additionalData","formData","append","Object","entries","forEach","key","value","pollJobStatus","jobId","onProgress","pollInterval","progress","result_url"],"sources":["/Users/noritakasawada/AI_P/subsidyApp/frontend/src/lib/api/client.ts"],"sourcesContent":["import { ErrorResponse } from './types';\n\ninterface ApiClientConfig {\n  baseURL?: string;\n  headers?: Record<string, string>;\n  timeout?: number;\n}\n\ninterface RequestOptions extends RequestInit {\n  timeout?: number;\n  idempotencyKey?: string;\n  retry?: {\n    attempts?: number;\n    delay?: number;\n    backoff?: boolean;\n  };\n}\n\nclass ApiError extends Error {\n  public readonly status: number;\n  public readonly code?: string;\n  public readonly details?: Record<string, any>;\n\n  constructor(message: string, status: number, code?: string, details?: Record<string, any>) {\n    super(message);\n    this.name = 'ApiError';\n    this.status = status;\n    this.code = code;\n    this.details = details;\n  }\n}\n\nclass ApiClient {\n  private baseURL: string;\n  private defaultHeaders: Record<string, string>;\n  private timeout: number;\n  private authToken?: string;\n\n  constructor(config: ApiClientConfig = {}) {\n    // Next.js のリバースプロキシを使用するため、/api プレフィックスを追加\n    this.baseURL = config.baseURL || process.env.NEXT_PUBLIC_API_URL || '/api';\n    this.defaultHeaders = {\n      'Content-Type': 'application/json',\n      ...config.headers,\n    };\n    this.timeout = config.timeout || 30000;\n  }\n\n  setAuthToken(token: string) {\n    this.authToken = token;\n  }\n\n  clearAuthToken() {\n    this.authToken = undefined;\n  }\n\n  private generateIdempotencyKey(): string {\n    return `${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;\n  }\n\n  private async withTimeout<T>(promise: Promise<T>, timeoutMs: number): Promise<T> {\n    return Promise.race([\n      promise,\n      new Promise<never>((_, reject) =>\n        setTimeout(() => reject(new Error('Request timeout')), timeoutMs)\n      ),\n    ]);\n  }\n\n  private async sleep(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  private async retryRequest(\n    url: string,\n    options: RequestOptions,\n    retryConfig: RequestOptions['retry']\n  ): Promise<Response> {\n    const maxAttempts = retryConfig?.attempts || 3;\n    const baseDelay = retryConfig?.delay || 1000;\n    const useBackoff = retryConfig?.backoff !== false;\n\n    let lastError: Error | undefined;\n\n    for (let attempt = 0; attempt < maxAttempts; attempt++) {\n      try {\n        const response = await fetch(url, options);\n\n        // 5xx エラーの場合はリトライ\n        if (response.status >= 500 && attempt < maxAttempts - 1) {\n          throw new Error(`Server error: ${response.status}`);\n        }\n\n        return response;\n      } catch (error) {\n        lastError = error as Error;\n\n        if (attempt < maxAttempts - 1) {\n          const delay = useBackoff ? baseDelay * Math.pow(2, attempt) : baseDelay;\n          await this.sleep(delay);\n        }\n      }\n    }\n\n    throw lastError || new Error('Request failed after retries');\n  }\n\n  async request<T = any>(\n    endpoint: string,\n    options: RequestOptions = {}\n  ): Promise<T> {\n    const url = `${this.baseURL}${endpoint}`;\n\n    // ヘッダーの構築\n    const headers: Record<string, string> = {\n      ...this.defaultHeaders,\n      ...options.headers,\n    };\n\n    // multipart(FormData)の場合はContent-Typeを外す（ブラウザが境界を含め自動設定）\n    const isFormData =\n      typeof FormData !== 'undefined' && options.body instanceof FormData;\n    if (isFormData && 'Content-Type' in headers) {\n      delete headers['Content-Type'];\n    }\n\n    // 認証トークンの追加\n    if (this.authToken) {\n      headers['Authorization'] = `Bearer ${this.authToken}`;\n    }\n\n    // Idempotency-Keyの追加（POST/PUT/PATCHの場合）\n    const method = options.method?.toUpperCase();\n    if (['POST', 'PUT', 'PATCH'].includes(method || '')) {\n      const idempotencyKey = options.idempotencyKey || this.generateIdempotencyKey();\n      headers['X-Idempotency-Key'] = idempotencyKey;\n    }\n\n    const requestOptions: RequestOptions = {\n      ...options,\n      headers,\n    };\n\n    try {\n      // タイムアウト付きリクエスト\n      const timeoutMs = options.timeout || this.timeout;\n      const fetchPromise = options.retry\n        ? this.retryRequest(url, requestOptions, options.retry)\n        : fetch(url, requestOptions);\n\n      const response = await this.withTimeout(fetchPromise, timeoutMs);\n\n      // エラーレスポンスの処理\n      if (!response.ok) {\n        const errorData: ErrorResponse = await response.json().catch(() => ({\n          error: {\n            code: 'UNKNOWN_ERROR',\n            message: `HTTP ${response.status}: ${response.statusText}`,\n          },\n          timestamp: new Date().toISOString(),\n          path: endpoint,\n        }));\n\n        throw new ApiError(\n          errorData.error.message,\n          response.status,\n          errorData.error.code,\n          errorData.error.details\n        );\n      }\n\n      // 204 No Content の場合\n      if (response.status === 204) {\n        return undefined as any;\n      }\n\n      // JSONレスポンスのパース\n      const data = await response.json();\n      return data as T;\n    } catch (error) {\n      // ApiErrorの場合はそのまま投げる\n      if (error instanceof ApiError) {\n        throw error;\n      }\n\n      // その他のエラー\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      throw new ApiError(errorMessage, 0);\n    }\n  }\n\n  // 便利メソッド\n  async get<T = any>(endpoint: string, options?: RequestOptions): Promise<T> {\n    return this.request<T>(endpoint, { ...options, method: 'GET' });\n  }\n\n  async post<T = any>(\n    endpoint: string,\n    data?: any,\n    options?: RequestOptions\n  ): Promise<T> {\n    // FormDataの場合はそのまま、それ以外はJSON.stringify\n    const body = data instanceof FormData ? data : (data ? JSON.stringify(data) : undefined);\n\n    return this.request<T>(endpoint, {\n      ...options,\n      method: 'POST',\n      body,\n    });\n  }\n\n  async put<T = any>(\n    endpoint: string,\n    data?: any,\n    options?: RequestOptions\n  ): Promise<T> {\n    return this.request<T>(endpoint, {\n      ...options,\n      method: 'PUT',\n      body: data ? JSON.stringify(data) : undefined,\n    });\n  }\n\n  async patch<T = any>(\n    endpoint: string,\n    data?: any,\n    options?: RequestOptions\n  ): Promise<T> {\n    return this.request<T>(endpoint, {\n      ...options,\n      method: 'PATCH',\n      body: data ? JSON.stringify(data) : undefined,\n    });\n  }\n\n  async delete<T = any>(endpoint: string, options?: RequestOptions): Promise<T> {\n    return this.request<T>(endpoint, { ...options, method: 'DELETE' });\n  }\n\n  // ファイルアップロード用\n  async uploadFile<T = any>(\n    endpoint: string,\n    file: File,\n    additionalData?: Record<string, string>,\n    options?: RequestOptions\n  ): Promise<T> {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    if (additionalData) {\n      Object.entries(additionalData).forEach(([key, value]) => {\n        formData.append(key, value);\n      });\n    }\n\n    // Content-Typeヘッダーを削除（ブラウザが自動設定）\n    const headers = { ...options?.headers };\n    delete headers['Content-Type'];\n\n    return this.request<T>(endpoint, {\n      ...options,\n      method: 'POST',\n      headers,\n      body: formData,\n    });\n  }\n\n  // ジョブステータスのポーリング\n  async pollJobStatus(\n    jobId: string,\n    onProgress?: (progress: number) => void,\n    pollInterval = 1000,\n    maxAttempts = 60\n  ): Promise<any> {\n    let attempts = 0;\n\n    while (attempts < maxAttempts) {\n      const response = await this.get(`/jobs/${jobId}`);\n\n      if (onProgress && typeof response.progress === 'number') {\n        onProgress(response.progress);\n      }\n\n      if (response.status === 'succeeded') {\n        if (response.result_url) {\n          // 結果URLから実際のデータを取得\n          return await this.get(response.result_url);\n        }\n        return response;\n      }\n\n      if (response.status === 'failed') {\n        throw new ApiError('Job failed', 500, 'JOB_FAILED', response);\n      }\n\n      await this.sleep(pollInterval);\n      attempts++;\n    }\n\n    throw new ApiError('Job polling timeout', 504, 'JOB_TIMEOUT');\n  }\n}\n\n// シングルトンインスタンス\nconst apiClient = new ApiClient();\n\nexport { apiClient, ApiClient, ApiError };\nexport default apiClient;\n"],"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","ignoreList":[]}