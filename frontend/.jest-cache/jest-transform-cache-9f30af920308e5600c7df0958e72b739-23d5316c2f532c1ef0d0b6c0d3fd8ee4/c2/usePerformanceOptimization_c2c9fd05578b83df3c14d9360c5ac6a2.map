{"version":3,"names":["createMemoComparison","cov_1elcq3uzu0","f","s","useBatchedUpdates","useDebounce","useExpensiveComputation","usePerformanceMonitor","useVirtualScroll","data","computeFn","dependencies","b","cache","_react","useRef","dataHash","useMemo","JSON","stringify","current","hash","computed","result","value","delay","debouncedValue","setDebouncedValue","default","useState","timeoutRef","useEffect","clearTimeout","setTimeout","items","itemHeight","containerHeight","overscan","scrollTop","setScrollTop","visibleRange","startIndex","Math","max","floor","endIndex","min","length","ceil","visibleItems","slice","map","item","index","style","position","top","height","width","totalHeight","handleScroll","useCallback","event","currentTarget","keys","prevProps","nextProps","key","componentName","renderCount","startTime","performance","now","process","env","NODE_ENV","console","log","endTime","renderTime","warn","toFixed","markStart","markEnd","label","duration","initialState","batchSize","state","setState","pendingUpdates","flushUpdates","prevState","reduce","acc","updateFn","batchedUpdate","push","undefined"],"sources":["/Users/noritakasawada/AI_P/subsidyApp/frontend/src/hooks/usePerformanceOptimization.ts"],"sourcesContent":["import { useCallback, useMemo, useRef, useEffect } from 'react';\n\n/**\n * APP-240: プレビュー差分再描画/キャッシュ最適化\n * パフォーマンス最適化フック集\n */\n\n// Virtual DOM差分計算用のキャッシュ\ninterface VirtualDOMCache<T> {\n  data: T;\n  computed: any;\n  hash: string;\n}\n\n/**\n * 計算コストの高い処理を最適化するフック\n */\nexport function useExpensiveComputation<T, R>(\n  data: T,\n  computeFn: (data: T) => R,\n  dependencies: React.DependencyList = []\n): R {\n  const cache = useRef<VirtualDOMCache<R> | null>(null);\n  \n  // データのハッシュ化（差分検出用）\n  const dataHash = useMemo(() => {\n    return JSON.stringify(data);\n  }, [data]);\n  \n  return useMemo(() => {\n    // キャッシュヒット判定\n    if (cache.current && cache.current.hash === dataHash) {\n      return cache.current.computed;\n    }\n    \n    // 新規計算実行\n    const result = computeFn(data);\n    \n    // キャッシュ更新\n    cache.current = {\n      data: data,\n      computed: result,\n      hash: dataHash\n    };\n    \n    return result;\n  }, [dataHash, ...dependencies]);\n}\n\n/**\n * レンダリング最適化用のデバウンスフック\n */\nexport function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = React.useState<T>(value);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n  \n  useEffect(() => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    \n    timeoutRef.current = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    \n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [value, delay]);\n  \n  return debouncedValue;\n}\n\n/**\n * Virtual Scrolling用のビューポート計算フック\n */\nexport function useVirtualScroll<T>(\n  items: T[],\n  itemHeight: number,\n  containerHeight: number,\n  overscan: number = 5\n) {\n  const [scrollTop, setScrollTop] = React.useState(0);\n  \n  const visibleRange = useMemo(() => {\n    const startIndex = Math.max(0, Math.floor(scrollTop / itemHeight) - overscan);\n    const endIndex = Math.min(\n      items.length - 1,\n      Math.ceil((scrollTop + containerHeight) / itemHeight) + overscan\n    );\n    \n    return { startIndex, endIndex };\n  }, [scrollTop, itemHeight, containerHeight, overscan, items.length]);\n  \n  const visibleItems = useMemo(() => {\n    return items.slice(visibleRange.startIndex, visibleRange.endIndex + 1).map((item, index) => ({\n      item,\n      index: visibleRange.startIndex + index,\n      style: {\n        position: 'absolute' as const,\n        top: (visibleRange.startIndex + index) * itemHeight,\n        height: itemHeight,\n        width: '100%'\n      }\n    }));\n  }, [items, visibleRange, itemHeight]);\n  \n  const totalHeight = items.length * itemHeight;\n  \n  const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {\n    setScrollTop(event.currentTarget.scrollTop);\n  }, []);\n  \n  return {\n    visibleItems,\n    totalHeight,\n    handleScroll,\n    visibleRange\n  };\n}\n\n/**\n * React.memo用の等価性判定関数生成\n */\nexport function createMemoComparison<T extends Record<string, any>>(\n  keys: (keyof T)[]\n) {\n  return (prevProps: T, nextProps: T): boolean => {\n    // 指定されたキーのみ比較\n    for (const key of keys) {\n      if (prevProps[key] !== nextProps[key]) {\n        return false;\n      }\n    }\n    return true;\n  };\n}\n\n/**\n * パフォーマンス監視フック\n */\nexport function usePerformanceMonitor(componentName: string) {\n  const renderCount = useRef(0);\n  const startTime = useRef<number>(0);\n  \n  useEffect(() => {\n    renderCount.current += 1;\n    startTime.current = performance.now();\n    \n    if (process.env.NODE_ENV === 'development') {\n      console.log(`${componentName} rendered ${renderCount.current} times`);\n    }\n    \n    return () => {\n      const endTime = performance.now();\n      const renderTime = endTime - startTime.current;\n      \n      if (process.env.NODE_ENV === 'development' && renderTime > 16) {\n        console.warn(`${componentName} slow render: ${renderTime.toFixed(2)}ms`);\n      }\n    };\n  });\n  \n  return {\n    renderCount: renderCount.current,\n    markStart: () => { startTime.current = performance.now(); },\n    markEnd: (label?: string) => {\n      const endTime = performance.now();\n      const duration = endTime - startTime.current;\n      \n      if (process.env.NODE_ENV === 'development') {\n        console.log(`${componentName}${label ? ` ${label}` : ''}: ${duration.toFixed(2)}ms`);\n      }\n      \n      return duration;\n    }\n  };\n}\n\n/**\n * バッチ更新最適化フック\n */\nexport function useBatchedUpdates<T>(\n  initialState: T,\n  batchSize: number = 10,\n  delay: number = 100\n) {\n  const [state, setState] = React.useState<T>(initialState);\n  const pendingUpdates = useRef<((prev: T) => T)[]>([]);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n  \n  const flushUpdates = useCallback(() => {\n    if (pendingUpdates.current.length === 0) return;\n    \n    setState(prevState => {\n      return pendingUpdates.current.reduce((acc, updateFn) => updateFn(acc), prevState);\n    });\n    \n    pendingUpdates.current = [];\n  }, []);\n  \n  const batchedUpdate = useCallback((updateFn: (prev: T) => T) => {\n    pendingUpdates.current.push(updateFn);\n    \n    // バッチサイズに達したら即座に実行\n    if (pendingUpdates.current.length >= batchSize) {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n        timeoutRef.current = undefined;\n      }\n      flushUpdates();\n      return;\n    }\n    \n    // タイマーベースの遅延実行\n    if (!timeoutRef.current) {\n      timeoutRef.current = setTimeout(() => {\n        flushUpdates();\n        timeoutRef.current = undefined;\n      }, delay);\n    }\n  }, [batchSize, delay, flushUpdates]);\n  \n  // クリーンアップ\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n        flushUpdates();\n      }\n    };\n  }, [flushUpdates]);\n  \n  return [state, batchedUpdate] as const;\n}\n\n// React import fix\nimport React from 'react';"],"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","ignoreList":[]}