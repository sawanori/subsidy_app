import { chromium, FullConfig } from '@playwright/test';

/**
 * APP-100: Playwright „Ç∞„É≠„Éº„Éê„É´„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
 * governance.yamlÊ∫ñÊã† - „ÉÜ„Çπ„ÉàÁí∞Â¢ÉÂàùÊúüÂåñ
 */
async function globalSetup(config: FullConfig) {
  console.log('üöÄ APP-100 E2E Test Suite Starting...');
  
  // „ÉÜ„Çπ„ÉàÁî®„Éñ„É©„Ç¶„Ç∂„ÉºËµ∑ÂãïÁ¢∫Ë™ç
  const browser = await chromium.launch();
  const context = await browser.newContext();
  const page = await context.newPage();
  
  try {
    // „Éô„Éº„ÇπURL„Ç¢„ÇØ„Çª„ÇπÁ¢∫Ë™ç
    await page.goto('http://localhost:3000', {
      timeout: 30000
    });
    
    // Âü∫Êú¨„Éö„Éº„Ç∏Ë°®Á§∫Á¢∫Ë™ç
    await page.waitForSelector('body', { timeout: 10000 });
    
    console.log('‚úÖ Development server is ready');
    console.log(`üìç Base URL: http://localhost:3000`);
    
    // governance.yamlÊ∫ñÊã†„ÉÅ„Çß„ÉÉ„ÇØ
    const startTime = Date.now();
    await page.goto(`http://localhost:3000/ja/preview-demo`);
    const loadTime = Date.now() - startTime;
    
    if (loadTime > 2000) {
      console.warn(`‚ö†Ô∏è  Page load time: ${loadTime}ms (governance.yaml requires <2s)`);
    } else {
      console.log(`‚úÖ Page load time: ${loadTime}ms (governance.yaml compliant)`);
    }
    
  } catch (error) {
    console.error('‚ùå Global setup failed:', error);
    throw error;
  } finally {
    await browser.close();
  }
  
  // „ÉÜ„Çπ„ÉàÂÆüË°åÁí∞Â¢É„ÅÆÊ∫ñÂÇôÂÆå‰∫Ü
  console.log('üéØ Global setup completed successfully');
  
  // Áí∞Â¢ÉÂ§âÊï∞Ë®≠ÂÆö
  process.env.PLAYWRIGHT_TEST_READY = 'true';
  process.env.PLAYWRIGHT_START_TIME = Date.now().toString();
}

export default globalSetup;