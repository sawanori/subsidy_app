version: '3.8'

services:
  # PostgreSQL Database for Development
  postgres-dev:
    image: postgres:15-alpine
    container_name: subsidyapp-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: subsidyapp_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    networks:
      - subsidyapp-dev-network

  # Redis for Development
  redis-dev:
    image: redis:7-alpine
    container_name: subsidyapp-redis-dev
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - subsidyapp-dev-network
    command: redis-server --appendonly yes

  # Backend Development
  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: subsidyapp-backend-dev
    restart: unless-stopped
    ports:
      - "3001:3001"
      - "9229:9229" # Debug port
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres-dev:5432/subsidyapp_dev?schema=public
      REDIS_URL: redis://redis-dev:6379
      JWT_SECRET: dev-jwt-secret
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/uploads:/app/uploads
    networks:
      - subsidyapp-dev-network
    depends_on:
      - postgres-dev
      - redis-dev
    command: npm run start:debug

  # Frontend Development
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: subsidyapp-frontend-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: dev-nextauth-secret
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - subsidyapp-dev-network
    depends_on:
      - backend-dev
    command: npm run dev

  # Database Management Tool (optional)
  adminer:
    image: adminer:4.8.1
    container_name: subsidyapp-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - subsidyapp-dev-network
    depends_on:
      - postgres-dev

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  subsidyapp-dev-network:
    driver: bridge