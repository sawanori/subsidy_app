name: CD - Continuous Deployment

on:
  workflow_run:
    workflows: ['APP-100: CI/CD Pipeline - governance.yaml Compliant']
    branches: [main]
    types: [completed]
  
  # Manual trigger for deployment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-deployment checks
  pre-deploy:
    name: 🔍 Pre-deployment Checks
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    outputs:
      deploy-staging: ${{ steps.check.outputs.deploy-staging }}
      deploy-production: ${{ steps.check.outputs.deploy-production }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check deployment conditions
        id: check
        run: |
          BRANCH="${{ github.ref_name }}"
          ENVIRONMENT="${{ inputs.environment || 'staging' }}"
          
          echo "Branch: $BRANCH"
          echo "Environment: $ENVIRONMENT"
          
          # Staging deployment conditions
          if [[ "$BRANCH" == "main" ]] || [[ "$BRANCH" == "develop" ]]; then
            echo "deploy-staging=true" >> $GITHUB_OUTPUT
          else
            echo "deploy-staging=false" >> $GITHUB_OUTPUT
          fi
          
          # Production deployment conditions
          if [[ "$BRANCH" == "main" ]] && [[ "$ENVIRONMENT" == "production" ]]; then
            echo "deploy-production=true" >> $GITHUB_OUTPUT
          else
            echo "deploy-production=false" >> $GITHUB_OUTPUT
          fi

  # Build production images
  build-production:
    name: 🏗️ Build Production Images
    runs-on: ubuntu-latest
    needs: pre-deploy
    if: needs.pre-deploy.outputs.deploy-staging == 'true' || needs.pre-deploy.outputs.deploy-production == 'true'
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=production,enable=${{ needs.pre-deploy.outputs.deploy-production == 'true' }}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deploy, build-production]
    if: needs.pre-deploy.outputs.deploy-staging == 'true'
    environment:
      name: staging
      url: https://staging.subsidyapp.com
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: service-account
          k8s-url: ${{ secrets.STAGING_K8S_URL }}
          k8s-secret: ${{ secrets.STAGING_K8S_SECRET }}
          
      - name: Deploy to Kubernetes
        run: |
          # Replace placeholders in manifests
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/staging/*.yaml
          sed -i "s|REGISTRY_PATH|${{ env.REGISTRY }}/${{ github.repository }}|g" k8s/staging/*.yaml
          
          # Apply manifests
          kubectl apply -f k8s/staging/
          
          # Wait for rollout
          kubectl rollout status deployment/subsidyapp-backend-staging
          kubectl rollout status deployment/subsidyapp-frontend-staging
          
      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Backend health check
          curl -f https://staging-api.subsidyapp.com/health || exit 1
          
          # Frontend health check
          curl -f https://staging.subsidyapp.com/api/health || exit 1
          
          echo "✅ Staging deployment successful"
          
      - name: Run integration tests
        run: |
          # Run integration tests against staging environment
          cd frontend
          npm ci
          NEXT_PUBLIC_API_URL=https://staging-api.subsidyapp.com npm run test:integration
          
      - name: Notify deployment success
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              description: 'Staging deployment completed successfully',
              environment_url: 'https://staging.subsidyapp.com'
            });

  # Deploy to production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deploy, build-production, deploy-staging]
    if: needs.pre-deploy.outputs.deploy-production == 'true'
    environment:
      name: production
      url: https://subsidyapp.com
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Manual approval checkpoint
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              base: 'main',
              sort: 'updated',
              direction: 'desc',
              per_page: 1
            });
            
            if (pr.length === 0) {
              core.setFailed('No recent PR found for deployment approval');
              return;
            }
            
            console.log(`Deploying PR #${pr[0].number}: ${pr[0].title}`);
            
      - name: Set up kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: service-account
          k8s-url: ${{ secrets.PRODUCTION_K8S_URL }}
          k8s-secret: ${{ secrets.PRODUCTION_K8S_SECRET }}
          
      - name: Blue-Green deployment preparation
        run: |
          # Create blue-green deployment
          CURRENT_COLOR=$(kubectl get service subsidyapp-frontend -o jsonpath='{.spec.selector.color}')
          
          if [ "$CURRENT_COLOR" = "blue" ]; then
            NEW_COLOR="green"
          else
            NEW_COLOR="blue"
          fi
          
          echo "Current: $CURRENT_COLOR, Deploying: $NEW_COLOR"
          echo "NEW_COLOR=$NEW_COLOR" >> $GITHUB_ENV
          
      - name: Deploy new version
        run: |
          # Update manifests with new color and image
          sed -i "s|IMAGE_TAG|production|g" k8s/production/*.yaml
          sed -i "s|REGISTRY_PATH|${{ env.REGISTRY }}/${{ github.repository }}|g" k8s/production/*.yaml
          sed -i "s|COLOR_LABEL|$NEW_COLOR|g" k8s/production/*.yaml
          
          # Deploy new version
          kubectl apply -f k8s/production/
          
          # Wait for new deployment to be ready
          kubectl rollout status deployment/subsidyapp-backend-$NEW_COLOR
          kubectl rollout status deployment/subsidyapp-frontend-$NEW_COLOR
          
      - name: Production smoke tests
        run: |
          # Test new deployment before switching traffic
          kubectl port-forward service/subsidyapp-frontend-$NEW_COLOR 3000:3000 &
          kubectl port-forward service/subsidyapp-backend-$NEW_COLOR 3001:3001 &
          sleep 10
          
          # Health checks
          curl -f http://localhost:3001/health || exit 1
          curl -f http://localhost:3000/api/health || exit 1
          
          # Kill port-forwards
          pkill -f "kubectl port-forward"
          
      - name: Switch traffic to new version
        run: |
          # Update service selectors to point to new color
          kubectl patch service subsidyapp-frontend -p '{"spec":{"selector":{"color":"'$NEW_COLOR'"}}}'
          kubectl patch service subsidyapp-backend -p '{"spec":{"selector":{"color":"'$NEW_COLOR'"}}}'
          
          echo "✅ Traffic switched to $NEW_COLOR deployment"
          
      - name: Final production tests
        run: |
          # Wait for DNS propagation
          sleep 60
          
          # Production health checks
          curl -f https://subsidyapp.com/api/health || exit 1
          curl -f https://api.subsidyapp.com/health || exit 1
          
          # Critical user journey test
          cd frontend
          npm ci
          NEXT_PUBLIC_API_URL=https://api.subsidyapp.com npm run test:production
          
      - name: Cleanup old deployment
        run: |
          OLD_COLOR="blue"
          if [ "$NEW_COLOR" = "blue" ]; then
            OLD_COLOR="green"
          fi
          
          # Scale down old deployment
          kubectl scale deployment subsidyapp-backend-$OLD_COLOR --replicas=1
          kubectl scale deployment subsidyapp-frontend-$OLD_COLOR --replicas=1
          
          echo "✅ Old deployment ($OLD_COLOR) scaled down"
          
      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              description: 'Production deployment completed successfully',
              environment_url: 'https://subsidyapp.com'
            });
            
      - name: Create release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Production Release v${{ github.run_number }}
          body: |
            ## 🚀 Production Deployment v${{ github.run_number }}
            
            **Git SHA**: `${{ github.sha }}`
            **Deployment Time**: ${{ env.DEPLOY_TIME }}
            
            ### ✅ Quality Gates Passed
            - Unit Tests: 70%+ coverage
            - E2E Tests: All scenarios passed  
            - Security Scan: No critical vulnerabilities
            - Performance: <2s load time
            - Accessibility: WCAG 2.1 AA compliant
            
            ### 🔧 Deployed Services
            - Backend API: `${{ env.REGISTRY }}/${{ github.repository }}/backend:production`
            - Frontend App: `${{ env.REGISTRY }}/${{ github.repository }}/frontend:production`
            
            ### 🌐 Live URLs
            - Production: https://subsidyapp.com
            - API: https://api.subsidyapp.com
            - Status: https://status.subsidyapp.com
          draft: false
          prerelease: false

  # Rollback capability
  rollback:
    name: 🔄 Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()
    environment: production
    
    steps:
      - name: Rollback to previous version
        run: |
          kubectl rollout undo deployment/subsidyapp-backend
          kubectl rollout undo deployment/subsidyapp-frontend
          
          kubectl rollout status deployment/subsidyapp-backend
          kubectl rollout status deployment/subsidyapp-frontend
          
          echo "✅ Rollback completed"
          
      - name: Notify rollback
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'failure',
              description: 'Deployment failed, rollback completed'
            });